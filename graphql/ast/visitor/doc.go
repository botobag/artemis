/**
 * Copyright (c) 2018, The Artemis Authors.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

//go:generate go run gen.go

// Package visitor implements AST traversal.
//
// Visitor is designed to be a "persistent" instance. That is, a visitor instance is expected to be
// initialized once and run many times for the same purpose. Visitor can be viewed as a collection
// of visitor functions, each of which specifies the actions to take for certain type of node during
// visiting an AST. The only way to construct a Visitor instance is via visitor.NewBuilder():
//
//	v := visitor.NewBuilder().
//		VisitNodeWith(&visitor.NodeVisitorFuncs{
//			Enter: func(node ast.Node, info *visitor.Info) visitor.Result {
//				// Return visitor.Continue or visitor.SkipSubTree or visitor.Break.
//			},
//			Leave: func(node ast.Node, info *visitor.Info) visitor.Result {
//				// Return visitor.Continue or visitor.SkipSubTree or visitor.Break.
//			},
//		}).
//		Build()
//	v.Visit(doc)
//
// Alternatively to provide Enter and Leave functions, there're two other way to provide visitor
// function. Wrap a function with visitor.NodeVisitorFunc if you only want to take action on
// entering a node:
//
//	v := visitor.NewBuilder().
//		VisitNodeWith(visitor.NodeVisitorFunc(
//			func(node ast.Node, info *visitor.Info) visitor.Result {
//				// Return visitor.Continue or visitor.SkipSubTree or visitor.Break.
//			})).
//		Build()
//
// Or, you can provide an instance that implements visitor.NodeVisitor interface.
//
// The visitor itself is generated by code and avoids using reflection approach like the one in
// graphql-go [0] to reduce the overheads. Validators relies heavily on visitor efficiency.
//
// Compare to the visitor in graphql-js [1], our visitor is less powerful. It doesn't track key and
// path, nor does it support AST editing during traversal. However, it should be sufficient for
// implementing GraphQL features. The simplicity also further reduces some overheads.
//
// [0]: https://github.com/graphql-go/graphql/blob/993e01c/language/visitor/visitor.go
// [1]: https://github.com/graphql/graphql-js/blob/64ff409/src/language/visitor.js
package visitor
