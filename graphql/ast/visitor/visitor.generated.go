/**
 * Copyright (c) 2019, The Artemis Authors.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package visitor

// Code generated by running "go generate" in github.com/botobag/artemis/graphql/ast/visitor.
// DO NOT EDIT.

import (
	"fmt"
	"github.com/botobag/artemis/graphql/ast"
)

// NodeVisitAction implements visiting function for Node.
type NodeVisitAction interface {
	VisitNode(node ast.Node, ctx interface{}) Result
}

// NodeVisitActionFunc is an adapter to help define a NodeVisitAction from a function
// which specifies action when traversing a node.
type NodeVisitActionFunc func(node ast.Node, ctx interface{}) Result

var _ NodeVisitAction = (NodeVisitActionFunc)(nil)

// VisitNode implements NodeVisitAction by calling f(node, ctx).
func (f NodeVisitActionFunc) VisitNode(node ast.Node, ctx interface{}) Result {
	return f(node, ctx)
}

// TypeVisitAction implements visiting function for Type.
type TypeVisitAction interface {
	VisitType(node ast.Type, ctx interface{}) Result
}

// TypeVisitActionFunc is an adapter to help define a TypeVisitAction from a function
// which specifies action when traversing a node.
type TypeVisitActionFunc func(node ast.Type, ctx interface{}) Result

var _ TypeVisitAction = (TypeVisitActionFunc)(nil)

// VisitType implements TypeVisitAction by calling f(node, ctx).
func (f TypeVisitActionFunc) VisitType(node ast.Type, ctx interface{}) Result {
	return f(node, ctx)
}

// ValueVisitAction implements visiting function for Value.
type ValueVisitAction interface {
	VisitValue(node ast.Value, ctx interface{}) Result
}

// ValueVisitActionFunc is an adapter to help define a ValueVisitAction from a function
// which specifies action when traversing a node.
type ValueVisitActionFunc func(node ast.Value, ctx interface{}) Result

var _ ValueVisitAction = (ValueVisitActionFunc)(nil)

// VisitValue implements ValueVisitAction by calling f(node, ctx).
func (f ValueVisitActionFunc) VisitValue(node ast.Value, ctx interface{}) Result {
	return f(node, ctx)
}

// DefinitionVisitAction implements visiting function for Definition.
type DefinitionVisitAction interface {
	VisitDefinition(node ast.Definition, ctx interface{}) Result
}

// DefinitionVisitActionFunc is an adapter to help define a DefinitionVisitAction from a function
// which specifies action when traversing a node.
type DefinitionVisitActionFunc func(node ast.Definition, ctx interface{}) Result

var _ DefinitionVisitAction = (DefinitionVisitActionFunc)(nil)

// VisitDefinition implements DefinitionVisitAction by calling f(node, ctx).
func (f DefinitionVisitActionFunc) VisitDefinition(node ast.Definition, ctx interface{}) Result {
	return f(node, ctx)
}

// SelectionVisitAction implements visiting function for Selection.
type SelectionVisitAction interface {
	VisitSelection(node ast.Selection, ctx interface{}) Result
}

// SelectionVisitActionFunc is an adapter to help define a SelectionVisitAction from a function
// which specifies action when traversing a node.
type SelectionVisitActionFunc func(node ast.Selection, ctx interface{}) Result

var _ SelectionVisitAction = (SelectionVisitActionFunc)(nil)

// VisitSelection implements SelectionVisitAction by calling f(node, ctx).
func (f SelectionVisitActionFunc) VisitSelection(node ast.Selection, ctx interface{}) Result {
	return f(node, ctx)
}

// ArgumentVisitAction implements visiting function for Argument.
type ArgumentVisitAction interface {
	VisitArgument(node *ast.Argument, ctx interface{}) Result
}

// ArgumentVisitActionFunc is an adapter to help define a ArgumentVisitAction from a function
// which specifies action when traversing a node.
type ArgumentVisitActionFunc func(node *ast.Argument, ctx interface{}) Result

var _ ArgumentVisitAction = (ArgumentVisitActionFunc)(nil)

// VisitArgument implements ArgumentVisitAction by calling f(node, ctx).
func (f ArgumentVisitActionFunc) VisitArgument(node *ast.Argument, ctx interface{}) Result {
	return f(node, ctx)
}

// ArgumentsVisitAction implements visiting function for Arguments.
type ArgumentsVisitAction interface {
	VisitArguments(node ast.Arguments, ctx interface{}) Result
}

// ArgumentsVisitActionFunc is an adapter to help define a ArgumentsVisitAction from a function
// which specifies action when traversing a node.
type ArgumentsVisitActionFunc func(node ast.Arguments, ctx interface{}) Result

var _ ArgumentsVisitAction = (ArgumentsVisitActionFunc)(nil)

// VisitArguments implements ArgumentsVisitAction by calling f(node, ctx).
func (f ArgumentsVisitActionFunc) VisitArguments(node ast.Arguments, ctx interface{}) Result {
	return f(node, ctx)
}

// BooleanValueVisitAction implements visiting function for BooleanValue.
type BooleanValueVisitAction interface {
	VisitBooleanValue(node ast.BooleanValue, ctx interface{}) Result
}

// BooleanValueVisitActionFunc is an adapter to help define a BooleanValueVisitAction from a function
// which specifies action when traversing a node.
type BooleanValueVisitActionFunc func(node ast.BooleanValue, ctx interface{}) Result

var _ BooleanValueVisitAction = (BooleanValueVisitActionFunc)(nil)

// VisitBooleanValue implements BooleanValueVisitAction by calling f(node, ctx).
func (f BooleanValueVisitActionFunc) VisitBooleanValue(node ast.BooleanValue, ctx interface{}) Result {
	return f(node, ctx)
}

// DefinitionsVisitAction implements visiting function for Definitions.
type DefinitionsVisitAction interface {
	VisitDefinitions(node ast.Definitions, ctx interface{}) Result
}

// DefinitionsVisitActionFunc is an adapter to help define a DefinitionsVisitAction from a function
// which specifies action when traversing a node.
type DefinitionsVisitActionFunc func(node ast.Definitions, ctx interface{}) Result

var _ DefinitionsVisitAction = (DefinitionsVisitActionFunc)(nil)

// VisitDefinitions implements DefinitionsVisitAction by calling f(node, ctx).
func (f DefinitionsVisitActionFunc) VisitDefinitions(node ast.Definitions, ctx interface{}) Result {
	return f(node, ctx)
}

// DirectiveVisitAction implements visiting function for Directive.
type DirectiveVisitAction interface {
	VisitDirective(node *ast.Directive, ctx interface{}) Result
}

// DirectiveVisitActionFunc is an adapter to help define a DirectiveVisitAction from a function
// which specifies action when traversing a node.
type DirectiveVisitActionFunc func(node *ast.Directive, ctx interface{}) Result

var _ DirectiveVisitAction = (DirectiveVisitActionFunc)(nil)

// VisitDirective implements DirectiveVisitAction by calling f(node, ctx).
func (f DirectiveVisitActionFunc) VisitDirective(node *ast.Directive, ctx interface{}) Result {
	return f(node, ctx)
}

// DirectivesVisitAction implements visiting function for Directives.
type DirectivesVisitAction interface {
	VisitDirectives(node ast.Directives, ctx interface{}) Result
}

// DirectivesVisitActionFunc is an adapter to help define a DirectivesVisitAction from a function
// which specifies action when traversing a node.
type DirectivesVisitActionFunc func(node ast.Directives, ctx interface{}) Result

var _ DirectivesVisitAction = (DirectivesVisitActionFunc)(nil)

// VisitDirectives implements DirectivesVisitAction by calling f(node, ctx).
func (f DirectivesVisitActionFunc) VisitDirectives(node ast.Directives, ctx interface{}) Result {
	return f(node, ctx)
}

// DocumentVisitAction implements visiting function for Document.
type DocumentVisitAction interface {
	VisitDocument(node ast.Document, ctx interface{}) Result
}

// DocumentVisitActionFunc is an adapter to help define a DocumentVisitAction from a function
// which specifies action when traversing a node.
type DocumentVisitActionFunc func(node ast.Document, ctx interface{}) Result

var _ DocumentVisitAction = (DocumentVisitActionFunc)(nil)

// VisitDocument implements DocumentVisitAction by calling f(node, ctx).
func (f DocumentVisitActionFunc) VisitDocument(node ast.Document, ctx interface{}) Result {
	return f(node, ctx)
}

// EnumValueVisitAction implements visiting function for EnumValue.
type EnumValueVisitAction interface {
	VisitEnumValue(node ast.EnumValue, ctx interface{}) Result
}

// EnumValueVisitActionFunc is an adapter to help define a EnumValueVisitAction from a function
// which specifies action when traversing a node.
type EnumValueVisitActionFunc func(node ast.EnumValue, ctx interface{}) Result

var _ EnumValueVisitAction = (EnumValueVisitActionFunc)(nil)

// VisitEnumValue implements EnumValueVisitAction by calling f(node, ctx).
func (f EnumValueVisitActionFunc) VisitEnumValue(node ast.EnumValue, ctx interface{}) Result {
	return f(node, ctx)
}

// FieldVisitAction implements visiting function for Field.
type FieldVisitAction interface {
	VisitField(node *ast.Field, ctx interface{}) Result
}

// FieldVisitActionFunc is an adapter to help define a FieldVisitAction from a function
// which specifies action when traversing a node.
type FieldVisitActionFunc func(node *ast.Field, ctx interface{}) Result

var _ FieldVisitAction = (FieldVisitActionFunc)(nil)

// VisitField implements FieldVisitAction by calling f(node, ctx).
func (f FieldVisitActionFunc) VisitField(node *ast.Field, ctx interface{}) Result {
	return f(node, ctx)
}

// FloatValueVisitAction implements visiting function for FloatValue.
type FloatValueVisitAction interface {
	VisitFloatValue(node ast.FloatValue, ctx interface{}) Result
}

// FloatValueVisitActionFunc is an adapter to help define a FloatValueVisitAction from a function
// which specifies action when traversing a node.
type FloatValueVisitActionFunc func(node ast.FloatValue, ctx interface{}) Result

var _ FloatValueVisitAction = (FloatValueVisitActionFunc)(nil)

// VisitFloatValue implements FloatValueVisitAction by calling f(node, ctx).
func (f FloatValueVisitActionFunc) VisitFloatValue(node ast.FloatValue, ctx interface{}) Result {
	return f(node, ctx)
}

// FragmentDefinitionVisitAction implements visiting function for FragmentDefinition.
type FragmentDefinitionVisitAction interface {
	VisitFragmentDefinition(node *ast.FragmentDefinition, ctx interface{}) Result
}

// FragmentDefinitionVisitActionFunc is an adapter to help define a FragmentDefinitionVisitAction from a function
// which specifies action when traversing a node.
type FragmentDefinitionVisitActionFunc func(node *ast.FragmentDefinition, ctx interface{}) Result

var _ FragmentDefinitionVisitAction = (FragmentDefinitionVisitActionFunc)(nil)

// VisitFragmentDefinition implements FragmentDefinitionVisitAction by calling f(node, ctx).
func (f FragmentDefinitionVisitActionFunc) VisitFragmentDefinition(node *ast.FragmentDefinition, ctx interface{}) Result {
	return f(node, ctx)
}

// FragmentSpreadVisitAction implements visiting function for FragmentSpread.
type FragmentSpreadVisitAction interface {
	VisitFragmentSpread(node *ast.FragmentSpread, ctx interface{}) Result
}

// FragmentSpreadVisitActionFunc is an adapter to help define a FragmentSpreadVisitAction from a function
// which specifies action when traversing a node.
type FragmentSpreadVisitActionFunc func(node *ast.FragmentSpread, ctx interface{}) Result

var _ FragmentSpreadVisitAction = (FragmentSpreadVisitActionFunc)(nil)

// VisitFragmentSpread implements FragmentSpreadVisitAction by calling f(node, ctx).
func (f FragmentSpreadVisitActionFunc) VisitFragmentSpread(node *ast.FragmentSpread, ctx interface{}) Result {
	return f(node, ctx)
}

// InlineFragmentVisitAction implements visiting function for InlineFragment.
type InlineFragmentVisitAction interface {
	VisitInlineFragment(node *ast.InlineFragment, ctx interface{}) Result
}

// InlineFragmentVisitActionFunc is an adapter to help define a InlineFragmentVisitAction from a function
// which specifies action when traversing a node.
type InlineFragmentVisitActionFunc func(node *ast.InlineFragment, ctx interface{}) Result

var _ InlineFragmentVisitAction = (InlineFragmentVisitActionFunc)(nil)

// VisitInlineFragment implements InlineFragmentVisitAction by calling f(node, ctx).
func (f InlineFragmentVisitActionFunc) VisitInlineFragment(node *ast.InlineFragment, ctx interface{}) Result {
	return f(node, ctx)
}

// IntValueVisitAction implements visiting function for IntValue.
type IntValueVisitAction interface {
	VisitIntValue(node ast.IntValue, ctx interface{}) Result
}

// IntValueVisitActionFunc is an adapter to help define a IntValueVisitAction from a function
// which specifies action when traversing a node.
type IntValueVisitActionFunc func(node ast.IntValue, ctx interface{}) Result

var _ IntValueVisitAction = (IntValueVisitActionFunc)(nil)

// VisitIntValue implements IntValueVisitAction by calling f(node, ctx).
func (f IntValueVisitActionFunc) VisitIntValue(node ast.IntValue, ctx interface{}) Result {
	return f(node, ctx)
}

// ListTypeVisitAction implements visiting function for ListType.
type ListTypeVisitAction interface {
	VisitListType(node ast.ListType, ctx interface{}) Result
}

// ListTypeVisitActionFunc is an adapter to help define a ListTypeVisitAction from a function
// which specifies action when traversing a node.
type ListTypeVisitActionFunc func(node ast.ListType, ctx interface{}) Result

var _ ListTypeVisitAction = (ListTypeVisitActionFunc)(nil)

// VisitListType implements ListTypeVisitAction by calling f(node, ctx).
func (f ListTypeVisitActionFunc) VisitListType(node ast.ListType, ctx interface{}) Result {
	return f(node, ctx)
}

// ListValueVisitAction implements visiting function for ListValue.
type ListValueVisitAction interface {
	VisitListValue(node ast.ListValue, ctx interface{}) Result
}

// ListValueVisitActionFunc is an adapter to help define a ListValueVisitAction from a function
// which specifies action when traversing a node.
type ListValueVisitActionFunc func(node ast.ListValue, ctx interface{}) Result

var _ ListValueVisitAction = (ListValueVisitActionFunc)(nil)

// VisitListValue implements ListValueVisitAction by calling f(node, ctx).
func (f ListValueVisitActionFunc) VisitListValue(node ast.ListValue, ctx interface{}) Result {
	return f(node, ctx)
}

// NameVisitAction implements visiting function for Name.
type NameVisitAction interface {
	VisitName(node ast.Name, ctx interface{}) Result
}

// NameVisitActionFunc is an adapter to help define a NameVisitAction from a function
// which specifies action when traversing a node.
type NameVisitActionFunc func(node ast.Name, ctx interface{}) Result

var _ NameVisitAction = (NameVisitActionFunc)(nil)

// VisitName implements NameVisitAction by calling f(node, ctx).
func (f NameVisitActionFunc) VisitName(node ast.Name, ctx interface{}) Result {
	return f(node, ctx)
}

// NamedTypeVisitAction implements visiting function for NamedType.
type NamedTypeVisitAction interface {
	VisitNamedType(node ast.NamedType, ctx interface{}) Result
}

// NamedTypeVisitActionFunc is an adapter to help define a NamedTypeVisitAction from a function
// which specifies action when traversing a node.
type NamedTypeVisitActionFunc func(node ast.NamedType, ctx interface{}) Result

var _ NamedTypeVisitAction = (NamedTypeVisitActionFunc)(nil)

// VisitNamedType implements NamedTypeVisitAction by calling f(node, ctx).
func (f NamedTypeVisitActionFunc) VisitNamedType(node ast.NamedType, ctx interface{}) Result {
	return f(node, ctx)
}

// NonNullTypeVisitAction implements visiting function for NonNullType.
type NonNullTypeVisitAction interface {
	VisitNonNullType(node ast.NonNullType, ctx interface{}) Result
}

// NonNullTypeVisitActionFunc is an adapter to help define a NonNullTypeVisitAction from a function
// which specifies action when traversing a node.
type NonNullTypeVisitActionFunc func(node ast.NonNullType, ctx interface{}) Result

var _ NonNullTypeVisitAction = (NonNullTypeVisitActionFunc)(nil)

// VisitNonNullType implements NonNullTypeVisitAction by calling f(node, ctx).
func (f NonNullTypeVisitActionFunc) VisitNonNullType(node ast.NonNullType, ctx interface{}) Result {
	return f(node, ctx)
}

// NullValueVisitAction implements visiting function for NullValue.
type NullValueVisitAction interface {
	VisitNullValue(node ast.NullValue, ctx interface{}) Result
}

// NullValueVisitActionFunc is an adapter to help define a NullValueVisitAction from a function
// which specifies action when traversing a node.
type NullValueVisitActionFunc func(node ast.NullValue, ctx interface{}) Result

var _ NullValueVisitAction = (NullValueVisitActionFunc)(nil)

// VisitNullValue implements NullValueVisitAction by calling f(node, ctx).
func (f NullValueVisitActionFunc) VisitNullValue(node ast.NullValue, ctx interface{}) Result {
	return f(node, ctx)
}

// ObjectFieldVisitAction implements visiting function for ObjectField.
type ObjectFieldVisitAction interface {
	VisitObjectField(node *ast.ObjectField, ctx interface{}) Result
}

// ObjectFieldVisitActionFunc is an adapter to help define a ObjectFieldVisitAction from a function
// which specifies action when traversing a node.
type ObjectFieldVisitActionFunc func(node *ast.ObjectField, ctx interface{}) Result

var _ ObjectFieldVisitAction = (ObjectFieldVisitActionFunc)(nil)

// VisitObjectField implements ObjectFieldVisitAction by calling f(node, ctx).
func (f ObjectFieldVisitActionFunc) VisitObjectField(node *ast.ObjectField, ctx interface{}) Result {
	return f(node, ctx)
}

// ObjectValueVisitAction implements visiting function for ObjectValue.
type ObjectValueVisitAction interface {
	VisitObjectValue(node ast.ObjectValue, ctx interface{}) Result
}

// ObjectValueVisitActionFunc is an adapter to help define a ObjectValueVisitAction from a function
// which specifies action when traversing a node.
type ObjectValueVisitActionFunc func(node ast.ObjectValue, ctx interface{}) Result

var _ ObjectValueVisitAction = (ObjectValueVisitActionFunc)(nil)

// VisitObjectValue implements ObjectValueVisitAction by calling f(node, ctx).
func (f ObjectValueVisitActionFunc) VisitObjectValue(node ast.ObjectValue, ctx interface{}) Result {
	return f(node, ctx)
}

// OperationDefinitionVisitAction implements visiting function for OperationDefinition.
type OperationDefinitionVisitAction interface {
	VisitOperationDefinition(node *ast.OperationDefinition, ctx interface{}) Result
}

// OperationDefinitionVisitActionFunc is an adapter to help define a OperationDefinitionVisitAction from a function
// which specifies action when traversing a node.
type OperationDefinitionVisitActionFunc func(node *ast.OperationDefinition, ctx interface{}) Result

var _ OperationDefinitionVisitAction = (OperationDefinitionVisitActionFunc)(nil)

// VisitOperationDefinition implements OperationDefinitionVisitAction by calling f(node, ctx).
func (f OperationDefinitionVisitActionFunc) VisitOperationDefinition(node *ast.OperationDefinition, ctx interface{}) Result {
	return f(node, ctx)
}

// SelectionSetVisitAction implements visiting function for SelectionSet.
type SelectionSetVisitAction interface {
	VisitSelectionSet(node ast.SelectionSet, ctx interface{}) Result
}

// SelectionSetVisitActionFunc is an adapter to help define a SelectionSetVisitAction from a function
// which specifies action when traversing a node.
type SelectionSetVisitActionFunc func(node ast.SelectionSet, ctx interface{}) Result

var _ SelectionSetVisitAction = (SelectionSetVisitActionFunc)(nil)

// VisitSelectionSet implements SelectionSetVisitAction by calling f(node, ctx).
func (f SelectionSetVisitActionFunc) VisitSelectionSet(node ast.SelectionSet, ctx interface{}) Result {
	return f(node, ctx)
}

// StringValueVisitAction implements visiting function for StringValue.
type StringValueVisitAction interface {
	VisitStringValue(node ast.StringValue, ctx interface{}) Result
}

// StringValueVisitActionFunc is an adapter to help define a StringValueVisitAction from a function
// which specifies action when traversing a node.
type StringValueVisitActionFunc func(node ast.StringValue, ctx interface{}) Result

var _ StringValueVisitAction = (StringValueVisitActionFunc)(nil)

// VisitStringValue implements StringValueVisitAction by calling f(node, ctx).
func (f StringValueVisitActionFunc) VisitStringValue(node ast.StringValue, ctx interface{}) Result {
	return f(node, ctx)
}

// VariableVisitAction implements visiting function for Variable.
type VariableVisitAction interface {
	VisitVariable(node ast.Variable, ctx interface{}) Result
}

// VariableVisitActionFunc is an adapter to help define a VariableVisitAction from a function
// which specifies action when traversing a node.
type VariableVisitActionFunc func(node ast.Variable, ctx interface{}) Result

var _ VariableVisitAction = (VariableVisitActionFunc)(nil)

// VisitVariable implements VariableVisitAction by calling f(node, ctx).
func (f VariableVisitActionFunc) VisitVariable(node ast.Variable, ctx interface{}) Result {
	return f(node, ctx)
}

// VariableDefinitionVisitAction implements visiting function for VariableDefinition.
type VariableDefinitionVisitAction interface {
	VisitVariableDefinition(node *ast.VariableDefinition, ctx interface{}) Result
}

// VariableDefinitionVisitActionFunc is an adapter to help define a VariableDefinitionVisitAction from a function
// which specifies action when traversing a node.
type VariableDefinitionVisitActionFunc func(node *ast.VariableDefinition, ctx interface{}) Result

var _ VariableDefinitionVisitAction = (VariableDefinitionVisitActionFunc)(nil)

// VisitVariableDefinition implements VariableDefinitionVisitAction by calling f(node, ctx).
func (f VariableDefinitionVisitActionFunc) VisitVariableDefinition(node *ast.VariableDefinition, ctx interface{}) Result {
	return f(node, ctx)
}

// VariableDefinitionsVisitAction implements visiting function for VariableDefinitions.
type VariableDefinitionsVisitAction interface {
	VisitVariableDefinitions(node ast.VariableDefinitions, ctx interface{}) Result
}

// VariableDefinitionsVisitActionFunc is an adapter to help define a VariableDefinitionsVisitAction from a function
// which specifies action when traversing a node.
type VariableDefinitionsVisitActionFunc func(node ast.VariableDefinitions, ctx interface{}) Result

var _ VariableDefinitionsVisitAction = (VariableDefinitionsVisitActionFunc)(nil)

// VisitVariableDefinitions implements VariableDefinitionsVisitAction by calling f(node, ctx).
func (f VariableDefinitionsVisitActionFunc) VisitVariableDefinitions(node ast.VariableDefinitions, ctx interface{}) Result {
	return f(node, ctx)
}

// A Visitor is provided to Walk to apply actions during AST traversal. It contains a collection of
// actions to be executed for each type of node during the traversal.
type Visitor struct {
	argumentVisitAction            ArgumentVisitAction
	argumentsVisitAction           ArgumentsVisitAction
	booleanValueVisitAction        BooleanValueVisitAction
	definitionsVisitAction         DefinitionsVisitAction
	directiveVisitAction           DirectiveVisitAction
	directivesVisitAction          DirectivesVisitAction
	documentVisitAction            DocumentVisitAction
	enumValueVisitAction           EnumValueVisitAction
	fieldVisitAction               FieldVisitAction
	floatValueVisitAction          FloatValueVisitAction
	fragmentDefinitionVisitAction  FragmentDefinitionVisitAction
	fragmentSpreadVisitAction      FragmentSpreadVisitAction
	inlineFragmentVisitAction      InlineFragmentVisitAction
	intValueVisitAction            IntValueVisitAction
	listTypeVisitAction            ListTypeVisitAction
	listValueVisitAction           ListValueVisitAction
	nameVisitAction                NameVisitAction
	namedTypeVisitAction           NamedTypeVisitAction
	nonNullTypeVisitAction         NonNullTypeVisitAction
	nullValueVisitAction           NullValueVisitAction
	objectFieldVisitAction         ObjectFieldVisitAction
	objectValueVisitAction         ObjectValueVisitAction
	operationDefinitionVisitAction OperationDefinitionVisitAction
	selectionSetVisitAction        SelectionSetVisitAction
	stringValueVisitAction         StringValueVisitAction
	variableVisitAction            VariableVisitAction
	variableDefinitionVisitAction  VariableDefinitionVisitAction
	variableDefinitionsVisitAction VariableDefinitionsVisitAction
}

// VisitArgument applies actions on Argument.
func (v *Visitor) VisitArgument(node *ast.Argument, ctx interface{}) Result {
	if v.argumentVisitAction != nil {
		return v.argumentVisitAction.VisitArgument(node, ctx)
	}
	return Continue
}

// VisitArguments applies actions on Arguments.
func (v *Visitor) VisitArguments(node ast.Arguments, ctx interface{}) Result {
	if v.argumentsVisitAction != nil {
		return v.argumentsVisitAction.VisitArguments(node, ctx)
	}
	return Continue
}

// VisitBooleanValue applies actions on BooleanValue.
func (v *Visitor) VisitBooleanValue(node ast.BooleanValue, ctx interface{}) Result {
	if v.booleanValueVisitAction != nil {
		return v.booleanValueVisitAction.VisitBooleanValue(node, ctx)
	}
	return Continue
}

// VisitDefinitions applies actions on Definitions.
func (v *Visitor) VisitDefinitions(node ast.Definitions, ctx interface{}) Result {
	if v.definitionsVisitAction != nil {
		return v.definitionsVisitAction.VisitDefinitions(node, ctx)
	}
	return Continue
}

// VisitDirective applies actions on Directive.
func (v *Visitor) VisitDirective(node *ast.Directive, ctx interface{}) Result {
	if v.directiveVisitAction != nil {
		return v.directiveVisitAction.VisitDirective(node, ctx)
	}
	return Continue
}

// VisitDirectives applies actions on Directives.
func (v *Visitor) VisitDirectives(node ast.Directives, ctx interface{}) Result {
	if v.directivesVisitAction != nil {
		return v.directivesVisitAction.VisitDirectives(node, ctx)
	}
	return Continue
}

// VisitDocument applies actions on Document.
func (v *Visitor) VisitDocument(node ast.Document, ctx interface{}) Result {
	if v.documentVisitAction != nil {
		return v.documentVisitAction.VisitDocument(node, ctx)
	}
	return Continue
}

// VisitEnumValue applies actions on EnumValue.
func (v *Visitor) VisitEnumValue(node ast.EnumValue, ctx interface{}) Result {
	if v.enumValueVisitAction != nil {
		return v.enumValueVisitAction.VisitEnumValue(node, ctx)
	}
	return Continue
}

// VisitField applies actions on Field.
func (v *Visitor) VisitField(node *ast.Field, ctx interface{}) Result {
	if v.fieldVisitAction != nil {
		return v.fieldVisitAction.VisitField(node, ctx)
	}
	return Continue
}

// VisitFloatValue applies actions on FloatValue.
func (v *Visitor) VisitFloatValue(node ast.FloatValue, ctx interface{}) Result {
	if v.floatValueVisitAction != nil {
		return v.floatValueVisitAction.VisitFloatValue(node, ctx)
	}
	return Continue
}

// VisitFragmentDefinition applies actions on FragmentDefinition.
func (v *Visitor) VisitFragmentDefinition(node *ast.FragmentDefinition, ctx interface{}) Result {
	if v.fragmentDefinitionVisitAction != nil {
		return v.fragmentDefinitionVisitAction.VisitFragmentDefinition(node, ctx)
	}
	return Continue
}

// VisitFragmentSpread applies actions on FragmentSpread.
func (v *Visitor) VisitFragmentSpread(node *ast.FragmentSpread, ctx interface{}) Result {
	if v.fragmentSpreadVisitAction != nil {
		return v.fragmentSpreadVisitAction.VisitFragmentSpread(node, ctx)
	}
	return Continue
}

// VisitInlineFragment applies actions on InlineFragment.
func (v *Visitor) VisitInlineFragment(node *ast.InlineFragment, ctx interface{}) Result {
	if v.inlineFragmentVisitAction != nil {
		return v.inlineFragmentVisitAction.VisitInlineFragment(node, ctx)
	}
	return Continue
}

// VisitIntValue applies actions on IntValue.
func (v *Visitor) VisitIntValue(node ast.IntValue, ctx interface{}) Result {
	if v.intValueVisitAction != nil {
		return v.intValueVisitAction.VisitIntValue(node, ctx)
	}
	return Continue
}

// VisitListType applies actions on ListType.
func (v *Visitor) VisitListType(node ast.ListType, ctx interface{}) Result {
	if v.listTypeVisitAction != nil {
		return v.listTypeVisitAction.VisitListType(node, ctx)
	}
	return Continue
}

// VisitListValue applies actions on ListValue.
func (v *Visitor) VisitListValue(node ast.ListValue, ctx interface{}) Result {
	if v.listValueVisitAction != nil {
		return v.listValueVisitAction.VisitListValue(node, ctx)
	}
	return Continue
}

// VisitName applies actions on Name.
func (v *Visitor) VisitName(node ast.Name, ctx interface{}) Result {
	if v.nameVisitAction != nil {
		return v.nameVisitAction.VisitName(node, ctx)
	}
	return Continue
}

// VisitNamedType applies actions on NamedType.
func (v *Visitor) VisitNamedType(node ast.NamedType, ctx interface{}) Result {
	if v.namedTypeVisitAction != nil {
		return v.namedTypeVisitAction.VisitNamedType(node, ctx)
	}
	return Continue
}

// VisitNonNullType applies actions on NonNullType.
func (v *Visitor) VisitNonNullType(node ast.NonNullType, ctx interface{}) Result {
	if v.nonNullTypeVisitAction != nil {
		return v.nonNullTypeVisitAction.VisitNonNullType(node, ctx)
	}
	return Continue
}

// VisitNullValue applies actions on NullValue.
func (v *Visitor) VisitNullValue(node ast.NullValue, ctx interface{}) Result {
	if v.nullValueVisitAction != nil {
		return v.nullValueVisitAction.VisitNullValue(node, ctx)
	}
	return Continue
}

// VisitObjectField applies actions on ObjectField.
func (v *Visitor) VisitObjectField(node *ast.ObjectField, ctx interface{}) Result {
	if v.objectFieldVisitAction != nil {
		return v.objectFieldVisitAction.VisitObjectField(node, ctx)
	}
	return Continue
}

// VisitObjectValue applies actions on ObjectValue.
func (v *Visitor) VisitObjectValue(node ast.ObjectValue, ctx interface{}) Result {
	if v.objectValueVisitAction != nil {
		return v.objectValueVisitAction.VisitObjectValue(node, ctx)
	}
	return Continue
}

// VisitOperationDefinition applies actions on OperationDefinition.
func (v *Visitor) VisitOperationDefinition(node *ast.OperationDefinition, ctx interface{}) Result {
	if v.operationDefinitionVisitAction != nil {
		return v.operationDefinitionVisitAction.VisitOperationDefinition(node, ctx)
	}
	return Continue
}

// VisitSelectionSet applies actions on SelectionSet.
func (v *Visitor) VisitSelectionSet(node ast.SelectionSet, ctx interface{}) Result {
	if v.selectionSetVisitAction != nil {
		return v.selectionSetVisitAction.VisitSelectionSet(node, ctx)
	}
	return Continue
}

// VisitStringValue applies actions on StringValue.
func (v *Visitor) VisitStringValue(node ast.StringValue, ctx interface{}) Result {
	if v.stringValueVisitAction != nil {
		return v.stringValueVisitAction.VisitStringValue(node, ctx)
	}
	return Continue
}

// VisitVariable applies actions on Variable.
func (v *Visitor) VisitVariable(node ast.Variable, ctx interface{}) Result {
	if v.variableVisitAction != nil {
		return v.variableVisitAction.VisitVariable(node, ctx)
	}
	return Continue
}

// VisitVariableDefinition applies actions on VariableDefinition.
func (v *Visitor) VisitVariableDefinition(node *ast.VariableDefinition, ctx interface{}) Result {
	if v.variableDefinitionVisitAction != nil {
		return v.variableDefinitionVisitAction.VisitVariableDefinition(node, ctx)
	}
	return Continue
}

// VisitVariableDefinitions applies actions on VariableDefinitions.
func (v *Visitor) VisitVariableDefinitions(node ast.VariableDefinitions, ctx interface{}) Result {
	if v.variableDefinitionsVisitAction != nil {
		return v.variableDefinitionsVisitAction.VisitVariableDefinitions(node, ctx)
	}
	return Continue
}

// NewNodeVisitor creates a visitor instance which performs the given action when encountering Node.
func NewNodeVisitor(action NodeVisitAction) *Visitor {
	return &Visitor{
		inlineFragmentVisitAction: InlineFragmentVisitActionFunc(func(node *ast.InlineFragment, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		fragmentSpreadVisitAction: FragmentSpreadVisitActionFunc(func(node *ast.FragmentSpread, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		fieldVisitAction: FieldVisitActionFunc(func(node *ast.Field, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		operationDefinitionVisitAction: OperationDefinitionVisitActionFunc(func(node *ast.OperationDefinition, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		fragmentDefinitionVisitAction: FragmentDefinitionVisitActionFunc(func(node *ast.FragmentDefinition, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		variableVisitAction: VariableVisitActionFunc(func(node ast.Variable, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		stringValueVisitAction: StringValueVisitActionFunc(func(node ast.StringValue, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		objectValueVisitAction: ObjectValueVisitActionFunc(func(node ast.ObjectValue, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		nullValueVisitAction: NullValueVisitActionFunc(func(node ast.NullValue, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		listValueVisitAction: ListValueVisitActionFunc(func(node ast.ListValue, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		intValueVisitAction: IntValueVisitActionFunc(func(node ast.IntValue, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		floatValueVisitAction: FloatValueVisitActionFunc(func(node ast.FloatValue, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		enumValueVisitAction: EnumValueVisitActionFunc(func(node ast.EnumValue, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		booleanValueVisitAction: BooleanValueVisitActionFunc(func(node ast.BooleanValue, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		nonNullTypeVisitAction: NonNullTypeVisitActionFunc(func(node ast.NonNullType, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		namedTypeVisitAction: NamedTypeVisitActionFunc(func(node ast.NamedType, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		listTypeVisitAction: ListTypeVisitActionFunc(func(node ast.ListType, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		variableDefinitionsVisitAction: VariableDefinitionsVisitActionFunc(func(node ast.VariableDefinitions, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		variableDefinitionVisitAction: VariableDefinitionVisitActionFunc(func(node *ast.VariableDefinition, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		selectionSetVisitAction: SelectionSetVisitActionFunc(func(node ast.SelectionSet, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		objectFieldVisitAction: ObjectFieldVisitActionFunc(func(node *ast.ObjectField, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		nameVisitAction: NameVisitActionFunc(func(node ast.Name, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		documentVisitAction: DocumentVisitActionFunc(func(node ast.Document, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		directivesVisitAction: DirectivesVisitActionFunc(func(node ast.Directives, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		directiveVisitAction: DirectiveVisitActionFunc(func(node *ast.Directive, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		definitionsVisitAction: DefinitionsVisitActionFunc(func(node ast.Definitions, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		argumentsVisitAction: ArgumentsVisitActionFunc(func(node ast.Arguments, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
		argumentVisitAction: ArgumentVisitActionFunc(func(node *ast.Argument, ctx interface{}) Result {
			return action.VisitNode(node, ctx)
		}),
	}
}

// NewTypeVisitor creates a visitor instance which performs the given action when encountering Type.
func NewTypeVisitor(action TypeVisitAction) *Visitor {
	return &Visitor{
		nonNullTypeVisitAction: NonNullTypeVisitActionFunc(func(node ast.NonNullType, ctx interface{}) Result {
			return action.VisitType(node, ctx)
		}),
		namedTypeVisitAction: NamedTypeVisitActionFunc(func(node ast.NamedType, ctx interface{}) Result {
			return action.VisitType(node, ctx)
		}),
		listTypeVisitAction: ListTypeVisitActionFunc(func(node ast.ListType, ctx interface{}) Result {
			return action.VisitType(node, ctx)
		}),
	}
}

// NewValueVisitor creates a visitor instance which performs the given action when encountering Value.
func NewValueVisitor(action ValueVisitAction) *Visitor {
	return &Visitor{
		variableVisitAction: VariableVisitActionFunc(func(node ast.Variable, ctx interface{}) Result {
			return action.VisitValue(node, ctx)
		}),
		stringValueVisitAction: StringValueVisitActionFunc(func(node ast.StringValue, ctx interface{}) Result {
			return action.VisitValue(node, ctx)
		}),
		objectValueVisitAction: ObjectValueVisitActionFunc(func(node ast.ObjectValue, ctx interface{}) Result {
			return action.VisitValue(node, ctx)
		}),
		nullValueVisitAction: NullValueVisitActionFunc(func(node ast.NullValue, ctx interface{}) Result {
			return action.VisitValue(node, ctx)
		}),
		listValueVisitAction: ListValueVisitActionFunc(func(node ast.ListValue, ctx interface{}) Result {
			return action.VisitValue(node, ctx)
		}),
		intValueVisitAction: IntValueVisitActionFunc(func(node ast.IntValue, ctx interface{}) Result {
			return action.VisitValue(node, ctx)
		}),
		floatValueVisitAction: FloatValueVisitActionFunc(func(node ast.FloatValue, ctx interface{}) Result {
			return action.VisitValue(node, ctx)
		}),
		enumValueVisitAction: EnumValueVisitActionFunc(func(node ast.EnumValue, ctx interface{}) Result {
			return action.VisitValue(node, ctx)
		}),
		booleanValueVisitAction: BooleanValueVisitActionFunc(func(node ast.BooleanValue, ctx interface{}) Result {
			return action.VisitValue(node, ctx)
		}),
	}
}

// NewDefinitionVisitor creates a visitor instance which performs the given action when encountering Definition.
func NewDefinitionVisitor(action DefinitionVisitAction) *Visitor {
	return &Visitor{
		inlineFragmentVisitAction: InlineFragmentVisitActionFunc(func(node *ast.InlineFragment, ctx interface{}) Result {
			return action.VisitDefinition(node, ctx)
		}),
		fragmentSpreadVisitAction: FragmentSpreadVisitActionFunc(func(node *ast.FragmentSpread, ctx interface{}) Result {
			return action.VisitDefinition(node, ctx)
		}),
		fieldVisitAction: FieldVisitActionFunc(func(node *ast.Field, ctx interface{}) Result {
			return action.VisitDefinition(node, ctx)
		}),
		operationDefinitionVisitAction: OperationDefinitionVisitActionFunc(func(node *ast.OperationDefinition, ctx interface{}) Result {
			return action.VisitDefinition(node, ctx)
		}),
		fragmentDefinitionVisitAction: FragmentDefinitionVisitActionFunc(func(node *ast.FragmentDefinition, ctx interface{}) Result {
			return action.VisitDefinition(node, ctx)
		}),
	}
}

// NewSelectionVisitor creates a visitor instance which performs the given action when encountering Selection.
func NewSelectionVisitor(action SelectionVisitAction) *Visitor {
	return &Visitor{
		inlineFragmentVisitAction: InlineFragmentVisitActionFunc(func(node *ast.InlineFragment, ctx interface{}) Result {
			return action.VisitSelection(node, ctx)
		}),
		fragmentSpreadVisitAction: FragmentSpreadVisitActionFunc(func(node *ast.FragmentSpread, ctx interface{}) Result {
			return action.VisitSelection(node, ctx)
		}),
		fieldVisitAction: FieldVisitActionFunc(func(node *ast.Field, ctx interface{}) Result {
			return action.VisitSelection(node, ctx)
		}),
	}
}

// NewArgumentVisitor creates a visitor instance which performs the given action when encountering Argument.
func NewArgumentVisitor(action ArgumentVisitAction) *Visitor {
	return &Visitor{
		argumentVisitAction: action,
	}
}

// NewArgumentsVisitor creates a visitor instance which performs the given action when encountering Arguments.
func NewArgumentsVisitor(action ArgumentsVisitAction) *Visitor {
	return &Visitor{
		argumentsVisitAction: action,
	}
}

// NewBooleanValueVisitor creates a visitor instance which performs the given action when encountering BooleanValue.
func NewBooleanValueVisitor(action BooleanValueVisitAction) *Visitor {
	return &Visitor{
		booleanValueVisitAction: action,
	}
}

// NewDefinitionsVisitor creates a visitor instance which performs the given action when encountering Definitions.
func NewDefinitionsVisitor(action DefinitionsVisitAction) *Visitor {
	return &Visitor{
		definitionsVisitAction: action,
	}
}

// NewDirectiveVisitor creates a visitor instance which performs the given action when encountering Directive.
func NewDirectiveVisitor(action DirectiveVisitAction) *Visitor {
	return &Visitor{
		directiveVisitAction: action,
	}
}

// NewDirectivesVisitor creates a visitor instance which performs the given action when encountering Directives.
func NewDirectivesVisitor(action DirectivesVisitAction) *Visitor {
	return &Visitor{
		directivesVisitAction: action,
	}
}

// NewDocumentVisitor creates a visitor instance which performs the given action when encountering Document.
func NewDocumentVisitor(action DocumentVisitAction) *Visitor {
	return &Visitor{
		documentVisitAction: action,
	}
}

// NewEnumValueVisitor creates a visitor instance which performs the given action when encountering EnumValue.
func NewEnumValueVisitor(action EnumValueVisitAction) *Visitor {
	return &Visitor{
		enumValueVisitAction: action,
	}
}

// NewFieldVisitor creates a visitor instance which performs the given action when encountering Field.
func NewFieldVisitor(action FieldVisitAction) *Visitor {
	return &Visitor{
		fieldVisitAction: action,
	}
}

// NewFloatValueVisitor creates a visitor instance which performs the given action when encountering FloatValue.
func NewFloatValueVisitor(action FloatValueVisitAction) *Visitor {
	return &Visitor{
		floatValueVisitAction: action,
	}
}

// NewFragmentDefinitionVisitor creates a visitor instance which performs the given action when encountering FragmentDefinition.
func NewFragmentDefinitionVisitor(action FragmentDefinitionVisitAction) *Visitor {
	return &Visitor{
		fragmentDefinitionVisitAction: action,
	}
}

// NewFragmentSpreadVisitor creates a visitor instance which performs the given action when encountering FragmentSpread.
func NewFragmentSpreadVisitor(action FragmentSpreadVisitAction) *Visitor {
	return &Visitor{
		fragmentSpreadVisitAction: action,
	}
}

// NewInlineFragmentVisitor creates a visitor instance which performs the given action when encountering InlineFragment.
func NewInlineFragmentVisitor(action InlineFragmentVisitAction) *Visitor {
	return &Visitor{
		inlineFragmentVisitAction: action,
	}
}

// NewIntValueVisitor creates a visitor instance which performs the given action when encountering IntValue.
func NewIntValueVisitor(action IntValueVisitAction) *Visitor {
	return &Visitor{
		intValueVisitAction: action,
	}
}

// NewListTypeVisitor creates a visitor instance which performs the given action when encountering ListType.
func NewListTypeVisitor(action ListTypeVisitAction) *Visitor {
	return &Visitor{
		listTypeVisitAction: action,
	}
}

// NewListValueVisitor creates a visitor instance which performs the given action when encountering ListValue.
func NewListValueVisitor(action ListValueVisitAction) *Visitor {
	return &Visitor{
		listValueVisitAction: action,
	}
}

// NewNameVisitor creates a visitor instance which performs the given action when encountering Name.
func NewNameVisitor(action NameVisitAction) *Visitor {
	return &Visitor{
		nameVisitAction: action,
	}
}

// NewNamedTypeVisitor creates a visitor instance which performs the given action when encountering NamedType.
func NewNamedTypeVisitor(action NamedTypeVisitAction) *Visitor {
	return &Visitor{
		namedTypeVisitAction: action,
	}
}

// NewNonNullTypeVisitor creates a visitor instance which performs the given action when encountering NonNullType.
func NewNonNullTypeVisitor(action NonNullTypeVisitAction) *Visitor {
	return &Visitor{
		nonNullTypeVisitAction: action,
	}
}

// NewNullValueVisitor creates a visitor instance which performs the given action when encountering NullValue.
func NewNullValueVisitor(action NullValueVisitAction) *Visitor {
	return &Visitor{
		nullValueVisitAction: action,
	}
}

// NewObjectFieldVisitor creates a visitor instance which performs the given action when encountering ObjectField.
func NewObjectFieldVisitor(action ObjectFieldVisitAction) *Visitor {
	return &Visitor{
		objectFieldVisitAction: action,
	}
}

// NewObjectValueVisitor creates a visitor instance which performs the given action when encountering ObjectValue.
func NewObjectValueVisitor(action ObjectValueVisitAction) *Visitor {
	return &Visitor{
		objectValueVisitAction: action,
	}
}

// NewOperationDefinitionVisitor creates a visitor instance which performs the given action when encountering OperationDefinition.
func NewOperationDefinitionVisitor(action OperationDefinitionVisitAction) *Visitor {
	return &Visitor{
		operationDefinitionVisitAction: action,
	}
}

// NewSelectionSetVisitor creates a visitor instance which performs the given action when encountering SelectionSet.
func NewSelectionSetVisitor(action SelectionSetVisitAction) *Visitor {
	return &Visitor{
		selectionSetVisitAction: action,
	}
}

// NewStringValueVisitor creates a visitor instance which performs the given action when encountering StringValue.
func NewStringValueVisitor(action StringValueVisitAction) *Visitor {
	return &Visitor{
		stringValueVisitAction: action,
	}
}

// NewVariableVisitor creates a visitor instance which performs the given action when encountering Variable.
func NewVariableVisitor(action VariableVisitAction) *Visitor {
	return &Visitor{
		variableVisitAction: action,
	}
}

// NewVariableDefinitionVisitor creates a visitor instance which performs the given action when encountering VariableDefinition.
func NewVariableDefinitionVisitor(action VariableDefinitionVisitAction) *Visitor {
	return &Visitor{
		variableDefinitionVisitAction: action,
	}
}

// NewVariableDefinitionsVisitor creates a visitor instance which performs the given action when encountering VariableDefinitions.
func NewVariableDefinitionsVisitor(action VariableDefinitionsVisitAction) *Visitor {
	return &Visitor{
		variableDefinitionsVisitAction: action,
	}
}

func walkNode(node ast.Node, ctx interface{}, v *Visitor) Result {
	var result Result
	switch node := node.(type) {
	case *ast.Argument:
		result = walkArgument(node, ctx, v)
	case ast.Arguments:
		result = walkArguments(node, ctx, v)
	case ast.Definitions:
		result = walkDefinitions(node, ctx, v)
	case *ast.Directive:
		result = walkDirective(node, ctx, v)
	case ast.Directives:
		result = walkDirectives(node, ctx, v)
	case ast.Document:
		result = walkDocument(node, ctx, v)
	case ast.Name:
		result = walkName(node, ctx, v)
	case *ast.ObjectField:
		result = walkObjectField(node, ctx, v)
	case ast.SelectionSet:
		result = walkSelectionSet(node, ctx, v)
	case *ast.VariableDefinition:
		result = walkVariableDefinition(node, ctx, v)
	case ast.VariableDefinitions:
		result = walkVariableDefinitions(node, ctx, v)
	case ast.Type:
		result = walkType(node, ctx, v)
	case ast.Value:
		result = walkValue(node, ctx, v)
	case ast.Definition:
		result = walkDefinition(node, ctx, v)
	case ast.Selection:
		result = walkSelection(node, ctx, v)
	default:
		panic(fmt.Sprintf("unexpected node type %T when visiting Node", node))
	}
	if result == Break {
		return result
	}

	return Continue
}

func walkType(node ast.Type, ctx interface{}, v *Visitor) Result {
	var result Result
	switch node := node.(type) {
	case ast.ListType:
		result = walkListType(node, ctx, v)
	case ast.NamedType:
		result = walkNamedType(node, ctx, v)
	case ast.NonNullType:
		result = walkNonNullType(node, ctx, v)
	default:
		panic(fmt.Sprintf("unexpected node type %T when visiting Type", node))
	}
	if result == Break {
		return result
	}

	return Continue
}

func walkValue(node ast.Value, ctx interface{}, v *Visitor) Result {
	var result Result
	switch node := node.(type) {
	case ast.BooleanValue:
		result = walkBooleanValue(node, ctx, v)
	case ast.EnumValue:
		result = walkEnumValue(node, ctx, v)
	case ast.FloatValue:
		result = walkFloatValue(node, ctx, v)
	case ast.IntValue:
		result = walkIntValue(node, ctx, v)
	case ast.ListValue:
		result = walkListValue(node, ctx, v)
	case ast.NullValue:
		result = walkNullValue(node, ctx, v)
	case ast.ObjectValue:
		result = walkObjectValue(node, ctx, v)
	case ast.StringValue:
		result = walkStringValue(node, ctx, v)
	case ast.Variable:
		result = walkVariable(node, ctx, v)
	default:
		panic(fmt.Sprintf("unexpected node type %T when visiting Value", node))
	}
	if result == Break {
		return result
	}

	return Continue
}

func walkDefinition(node ast.Definition, ctx interface{}, v *Visitor) Result {
	var result Result
	switch node := node.(type) {
	case *ast.FragmentDefinition:
		result = walkFragmentDefinition(node, ctx, v)
	case *ast.OperationDefinition:
		result = walkOperationDefinition(node, ctx, v)
	case ast.Selection:
		result = walkSelection(node, ctx, v)
	default:
		panic(fmt.Sprintf("unexpected node type %T when visiting Definition", node))
	}
	if result == Break {
		return result
	}

	return Continue
}

func walkSelection(node ast.Selection, ctx interface{}, v *Visitor) Result {
	var result Result
	switch node := node.(type) {
	case *ast.Field:
		result = walkField(node, ctx, v)
	case *ast.FragmentSpread:
		result = walkFragmentSpread(node, ctx, v)
	case *ast.InlineFragment:
		result = walkInlineFragment(node, ctx, v)
	default:
		panic(fmt.Sprintf("unexpected node type %T when visiting Selection", node))
	}
	if result == Break {
		return result
	}

	return Continue
}

func walkArgument(node *ast.Argument, ctx interface{}, v *Visitor) Result {
	if result := v.VisitArgument(node, ctx); result != Continue {
		return result
	}

	// Visit Name.
	if result := walkName(node.Name, ctx, v); result == Break {
		return result
	}
	// Visit Value.
	if result := walkValue(node.Value, ctx, v); result == Break {
		return result
	}

	return Continue
}

func walkArguments(node ast.Arguments, ctx interface{}, v *Visitor) Result {
	if result := v.VisitArguments(node, ctx); result != Continue {
		return result
	}

	for _, childNode := range node {
		if result := walkArgument(childNode, ctx, v); result == Break {
			return result
		}
	}

	return Continue
}

func walkBooleanValue(node ast.BooleanValue, ctx interface{}, v *Visitor) Result {
	if result := v.VisitBooleanValue(node, ctx); result != Continue {
		return result
	}

	return Continue
}

func walkDefinitions(node ast.Definitions, ctx interface{}, v *Visitor) Result {
	if result := v.VisitDefinitions(node, ctx); result != Continue {
		return result
	}

	for _, childNode := range node {
		if result := walkDefinition(childNode, ctx, v); result == Break {
			return result
		}
	}

	return Continue
}

func walkDirective(node *ast.Directive, ctx interface{}, v *Visitor) Result {
	if result := v.VisitDirective(node, ctx); result != Continue {
		return result
	}

	// Visit Name.
	if result := walkName(node.Name, ctx, v); result == Break {
		return result
	}
	// Visit Arguments.
	if len(node.Arguments) != 0 {
		if result := walkArguments(node.Arguments, ctx, v); result == Break {
			return result
		}
	}

	return Continue
}

func walkDirectives(node ast.Directives, ctx interface{}, v *Visitor) Result {
	if result := v.VisitDirectives(node, ctx); result != Continue {
		return result
	}

	for _, childNode := range node {
		if result := walkDirective(childNode, ctx, v); result == Break {
			return result
		}
	}

	return Continue
}

func walkDocument(node ast.Document, ctx interface{}, v *Visitor) Result {
	if result := v.VisitDocument(node, ctx); result != Continue {
		return result
	}

	// Visit Definitions.
	if result := walkDefinitions(node.Definitions, ctx, v); result == Break {
		return result
	}

	return Continue
}

func walkEnumValue(node ast.EnumValue, ctx interface{}, v *Visitor) Result {
	if result := v.VisitEnumValue(node, ctx); result != Continue {
		return result
	}

	return Continue
}

func walkField(node *ast.Field, ctx interface{}, v *Visitor) Result {
	if result := v.VisitField(node, ctx); result != Continue {
		return result
	}

	// Visit Alias.
	if !node.Alias.IsNil() {
		if result := walkName(node.Alias, ctx, v); result == Break {
			return result
		}
	}
	// Visit Name.
	if result := walkName(node.Name, ctx, v); result == Break {
		return result
	}
	// Visit Arguments.
	if len(node.Arguments) != 0 {
		if result := walkArguments(node.Arguments, ctx, v); result == Break {
			return result
		}
	}
	// Visit Directives.
	if len(node.Directives) != 0 {
		if result := walkDirectives(node.Directives, ctx, v); result == Break {
			return result
		}
	}
	// Visit SelectionSet.
	if len(node.SelectionSet) != 0 {
		if result := walkSelectionSet(node.SelectionSet, ctx, v); result == Break {
			return result
		}
	}

	return Continue
}

func walkFloatValue(node ast.FloatValue, ctx interface{}, v *Visitor) Result {
	if result := v.VisitFloatValue(node, ctx); result != Continue {
		return result
	}

	return Continue
}

func walkFragmentDefinition(node *ast.FragmentDefinition, ctx interface{}, v *Visitor) Result {
	if result := v.VisitFragmentDefinition(node, ctx); result != Continue {
		return result
	}

	// Visit Name.
	if result := walkName(node.Name, ctx, v); result == Break {
		return result
	}
	// Visit VariableDefinitions.
	if len(node.VariableDefinitions) != 0 {
		if result := walkVariableDefinitions(node.VariableDefinitions, ctx, v); result == Break {
			return result
		}
	}
	// Visit TypeCondition.
	if result := walkNamedType(node.TypeCondition, ctx, v); result == Break {
		return result
	}
	// Visit Directives.
	if len(node.Directives) != 0 {
		if result := walkDirectives(node.Directives, ctx, v); result == Break {
			return result
		}
	}
	// Visit SelectionSet.
	if result := walkSelectionSet(node.SelectionSet, ctx, v); result == Break {
		return result
	}

	return Continue
}

func walkFragmentSpread(node *ast.FragmentSpread, ctx interface{}, v *Visitor) Result {
	if result := v.VisitFragmentSpread(node, ctx); result != Continue {
		return result
	}

	// Visit Name.
	if result := walkName(node.Name, ctx, v); result == Break {
		return result
	}
	// Visit Directives.
	if len(node.Directives) != 0 {
		if result := walkDirectives(node.Directives, ctx, v); result == Break {
			return result
		}
	}

	return Continue
}

func walkInlineFragment(node *ast.InlineFragment, ctx interface{}, v *Visitor) Result {
	if result := v.VisitInlineFragment(node, ctx); result != Continue {
		return result
	}

	// Visit TypeCondition.
	if !node.TypeCondition.Name.IsNil() {
		if result := walkNamedType(node.TypeCondition, ctx, v); result == Break {
			return result
		}
	}
	// Visit Directives.
	if len(node.Directives) != 0 {
		if result := walkDirectives(node.Directives, ctx, v); result == Break {
			return result
		}
	}
	// Visit SelectionSet.
	if result := walkSelectionSet(node.SelectionSet, ctx, v); result == Break {
		return result
	}

	return Continue
}

func walkIntValue(node ast.IntValue, ctx interface{}, v *Visitor) Result {
	if result := v.VisitIntValue(node, ctx); result != Continue {
		return result
	}

	return Continue
}

func walkListType(node ast.ListType, ctx interface{}, v *Visitor) Result {
	if result := v.VisitListType(node, ctx); result != Continue {
		return result
	}

	// Visit ItemType.
	if result := walkType(node.ItemType, ctx, v); result == Break {
		return result
	}

	return Continue
}

func walkListValue(node ast.ListValue, ctx interface{}, v *Visitor) Result {
	if result := v.VisitListValue(node, ctx); result != Continue {
		return result
	}

	for _, value := range node.Values() {
		if result := walkValue(value, ctx, v); result == Break {
			return result
		}
	}

	return Continue
}

func walkName(node ast.Name, ctx interface{}, v *Visitor) Result {
	if result := v.VisitName(node, ctx); result != Continue {
		return result
	}

	return Continue
}

func walkNamedType(node ast.NamedType, ctx interface{}, v *Visitor) Result {
	if result := v.VisitNamedType(node, ctx); result != Continue {
		return result
	}

	// Visit Name.
	if result := walkName(node.Name, ctx, v); result == Break {
		return result
	}

	return Continue
}

func walkNonNullType(node ast.NonNullType, ctx interface{}, v *Visitor) Result {
	if result := v.VisitNonNullType(node, ctx); result != Continue {
		return result
	}

	var result Result
	switch t := node.Type.(type) {
	case ast.NamedType:
		result = walkNamedType(t, ctx, v)
	case ast.ListType:
		result = walkListType(t, ctx, v)
	default:
		panic(fmt.Sprintf("unhandled nullable type \"%T\"", node.Type))
	}
	if result == Break {
		return result
	}

	return Continue
}

func walkNullValue(node ast.NullValue, ctx interface{}, v *Visitor) Result {
	if result := v.VisitNullValue(node, ctx); result != Continue {
		return result
	}

	return Continue
}

func walkObjectField(node *ast.ObjectField, ctx interface{}, v *Visitor) Result {
	if result := v.VisitObjectField(node, ctx); result != Continue {
		return result
	}

	// Visit Name.
	if result := walkName(node.Name, ctx, v); result == Break {
		return result
	}
	// Visit Value.
	if result := walkValue(node.Value, ctx, v); result == Break {
		return result
	}

	return Continue
}

func walkObjectValue(node ast.ObjectValue, ctx interface{}, v *Visitor) Result {
	if result := v.VisitObjectValue(node, ctx); result != Continue {
		return result
	}

	for _, field := range node.Fields() {
		if result := walkObjectField(field, ctx, v); result == Break {
			return result
		}
	}

	return Continue
}

func walkOperationDefinition(node *ast.OperationDefinition, ctx interface{}, v *Visitor) Result {
	if result := v.VisitOperationDefinition(node, ctx); result != Continue {
		return result
	}

	// Visit Name.
	if !node.Name.IsNil() {
		if result := walkName(node.Name, ctx, v); result == Break {
			return result
		}
	}
	// Visit VariableDefinitions.
	if len(node.VariableDefinitions) != 0 {
		if result := walkVariableDefinitions(node.VariableDefinitions, ctx, v); result == Break {
			return result
		}
	}
	// Visit Directives.
	if len(node.Directives) != 0 {
		if result := walkDirectives(node.Directives, ctx, v); result == Break {
			return result
		}
	}
	// Visit SelectionSet.
	if result := walkSelectionSet(node.SelectionSet, ctx, v); result == Break {
		return result
	}

	return Continue
}

func walkSelectionSet(node ast.SelectionSet, ctx interface{}, v *Visitor) Result {
	if result := v.VisitSelectionSet(node, ctx); result != Continue {
		return result
	}

	for _, childNode := range node {
		if result := walkSelection(childNode, ctx, v); result == Break {
			return result
		}
	}

	return Continue
}

func walkStringValue(node ast.StringValue, ctx interface{}, v *Visitor) Result {
	if result := v.VisitStringValue(node, ctx); result != Continue {
		return result
	}

	return Continue
}

func walkVariable(node ast.Variable, ctx interface{}, v *Visitor) Result {
	if result := v.VisitVariable(node, ctx); result != Continue {
		return result
	}

	// Visit Name.
	if result := walkName(node.Name, ctx, v); result == Break {
		return result
	}

	return Continue
}

func walkVariableDefinition(node *ast.VariableDefinition, ctx interface{}, v *Visitor) Result {
	if result := v.VisitVariableDefinition(node, ctx); result != Continue {
		return result
	}

	// Visit Variable.
	if result := walkVariable(node.Variable, ctx, v); result == Break {
		return result
	}
	// Visit Type.
	if result := walkType(node.Type, ctx, v); result == Break {
		return result
	}
	// Visit DefaultValue.
	if node.DefaultValue != nil {
		if result := walkValue(node.DefaultValue, ctx, v); result == Break {
			return result
		}
	}
	// Visit Directives.
	if len(node.Directives) != 0 {
		if result := walkDirectives(node.Directives, ctx, v); result == Break {
			return result
		}
	}

	return Continue
}

func walkVariableDefinitions(node ast.VariableDefinitions, ctx interface{}, v *Visitor) Result {
	if result := v.VisitVariableDefinitions(node, ctx); result != Continue {
		return result
	}

	for _, childNode := range node {
		if result := walkVariableDefinition(childNode, ctx, v); result == Break {
			return result
		}
	}

	return Continue
}
